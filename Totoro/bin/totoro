#!/usr/bin/env python
# -*- coding:utf-8 -*-

# @Author: José Sánchez-Gallego (gallegoj@uw.edu)
# @Date: 2018-05-07
# @Filename: Totoro
# @License: BSD 3-clause (http://www.opensource.org/licenses/BSD-3-Clause)
# @Copyright: José Sánchez-Gallego

import glob
import os
import sys

import click
from astropy import table, time
from pydl.pydlutils.yanny import yanny

import Totoro
import Totoro.utils.override
from Totoro import config, log, readPath
from Totoro.db import getConnection
from Totoro.dbclasses.plate import fromPlateID
from Totoro.exceptions import TotoroError, TotoroUserWarning
from Totoro.scheduler import Plugger, observingPlan
from Totoro.scheduler.io import saveExposures
from Totoro.scheduler.planner import Planner


def getMangaTileIDs():
    """Returns a dictionary of {plateid: manga_tileid} from the
    plateTargets files stored in mangacore."""

    mangacorePath = readPath(config['fields']['mangacore'])
    plateTargets = glob.glob(
        os.path.join(mangacorePath, 'platedesign/platetargets/plateTargets-*.par'))

    if len(plateTargets) == 0:
        raise TotoroError('no plateTargets files found.')

    mangaTileIDs = {}
    neverobserve = {}
    for plateTargetsFile in plateTargets:
        pT = yanny(plateTargetsFile)['PLTTRGT']
        for target in pT:
            if (target['plateid'] not in mangaTileIDs and target['manga_tileid'] > 0):
                mangaTileIDs[target['plateid']] = target['manga_tileid']
            if target['plateid'] not in neverobserve:
                neverobserve[target['plateid']] = target['neverobserve']

    return mangaTileIDs, neverobserve


def readSpecialPlates():
    """Returns an astropy.table.Table instance with the data for special
    plates."""

    specialPlatesFile = os.path.join(os.path.dirname(__file__), '../data/specialPlates.dat')

    return table.Table.read(specialPlatesFile, format='ascii.commented_header', delimiter=';')


@click.group()
@click.version_option(version=Totoro.__version__, prog_name='Totoro')
@click.option('-v', '--verbose', is_flag=True, help='Print lots of extra output.')
def totoro(verbose=False):

    if verbose is True:
        log.sh.setLevel('DEBUG')

    return


@totoro.command()
@click.option(
    '--start-date',
    type=float,
    help='The start date for the simulation. '
    'If not set, defaults to the current time.')
@click.option('-b', '--no-backup', is_flag=True, default=False, help='Do not use backup plates.')
@click.option('-s', '--save', type=click.Path(), help='Saves the simulation exposures to a file.')
@click.option('-b', '--no-backup', is_flag=True, default=False, help='Do not use backup plates.')
@click.option(
    '-w', '--weather-fraction', type=float, default=1.0, help='The good weather fraction to use.')
@click.option('-e', '--efficiency', type=float, default=0.755, help='The observing efficiency.')
@click.argument('end-date', type=float)
def simulate(end_date,
             start_date=None,
             no_backup=False,
             save=False,
             weather_fraction=1.0,
             efficiency=0.755):
    """Simulates a range of MJDs."""

    if no_backup:
        log.warning('Rejecting all backup plates.', TotoroUserWarning)

    planner = Planner(startDate=start_date, endDate=end_date, rejectBackup=no_backup)
    planner.schedule(goodWeatherFraction=weather_fraction, efficiency=efficiency, useFields=True)

    if save:
        saveExposures(planner.plates + planner.fields, str(save), startDate=planner.startDate)


@totoro.command()
@click.option(
    '-k', '--marked', is_flag=True, help='If set, only marked plates will be considered.')
@click.argument('mjd', type=int, nargs=-1)
def plugging(mjd=None, marked=False, verbose=False):
    """Creates a plugging request for a certain MJD."""

    if len(mjd) == 0:
        mjd = None
    elif len(mjd) == 1:
        mjd = mjd[0]
    elif len(mjd) > 1:
        raise ValueError('too many arguments')

    if mjd is None:
        log.warning('Using current MJD.', TotoroUserWarning)
        tt = time.Time.now()
    else:
        tt = time.Time(int(mjd), format='mjd')

    print_MJD = int(tt.mjd)

    log.info('creating plugging request for MJD=%s', print_MJD)
    jd0, jd1 = observingPlan.getJD(jd=int(tt.jd))

    plugger = Plugger(jd0, jd1, onlyMarked=marked)
    log.info('returned dictionary: %r', plugger.getASOutput())


@totoro.command()
@click.argument('PLATE', type=int)
@click.option('-f', '--force', is_flag=True,
              help='forces the set rearrangement even if the number of '
                   'exposures exceeds the limit.')
@click.option('-o', '--outputflush', is_flag=True,
              help='force sdtout writes to be immediately flushed. '
                   'Used for unix redirection and file monitoring')
@click.option('-n', '--nolst', is_flag=True, default=True,
              help='does not use the current LST to rearrange the '
                   'sets. If set, the incomplete sets will be moved '
                   'at the beginning of the observing window, if '
                   'possible.')
@click.option('-l', '--lst', type=float,
              help='tries to rearrange sets so that at least an '
                   'incomplete set is available after that LST.')
def rearrange(plate, force=False, outputflush=False, nolst=True, lst=None):
    """Optimally rearranges the sets in a plate."""

    if outputflush:
        sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

    pp = fromPlateID(plate)
    pp.rearrangeSets(force=force, LST=lst)


@totoro.group()
def override():
    """Overrides the status of a set of exposures."""

    return


@override.command()
@click.argument('EXPOSURES', type=int, nargs=-1)
def good(exposures):
    """Overrides a set of exposures as a good set."""

    if len(exposures) == 0 or len(exposures) > 3:
        raise click.UsageError('invalid number of exposures')

    Totoro.utils.override.override(exposures, 'Good')

    return


@override.command()
@click.argument('SET_PK', type=int)
@click.option('-r', '--reload', is_flag=True, default=False,
              help='If true, load the plate at which the set belongs after removing the set. '
                   'This will force a new set arrangement of the exposures in the removed set.')
def remove(set_pk, reload=False):
    """Returns the information about the set status."""

    Totoro.utils.override.removeStatus(set_pk, reload=reload)

    return


@override.command()
@click.argument('EXPOSURES', type=int, nargs=-1)
def info(exposures):
    """Returns information about a set.

    If the set exists it returns its real status. Otherwise, it returns
    status of the mock set and, if invalid, why it is so.

    """

    if len(exposures) == 0 or len(exposures) > 3:
        raise click.UsageError('invalid number of exposures')

    Totoro.utils.override.getInfo(exposures)

    return


@totoro.command()
@click.option('--deep-plates', type=click.Path(exists=True),
              help='loads a list of deep plates')
def load(deep_plates=None):
    """Loads plate information into mangaDB.Plate"""

    db = getConnection()
    session = db.Session()

    # If deep_plates, only load deep plates
    if deep_plates:

        deep_data = table.Table.read(deep_plates, format='ascii.commented_header')

        for plate_id, ha_min, ha_max, completion_factor in deep_data:

            totoro_plate = fromPlateID(plate_id)

            with session.begin(subtransactions=True):

                plate = session.query(db.plateDB.Plate).filter(
                    db.plateDB.Plate.plate_id == int(plate_id)).one()
                mangadb_plate = plate.mangadbPlate

                mangadb_plate.ha_min = ha_min
                mangadb_plate.ha_max = ha_max
                mangadb_plate.completion_factor = completion_factor

                # If the plate completion < goal, change the plugging status
                # back to Automatic.
                automatic_pk = session.query(db.plateDB.PluggingStatus).filter(
                    db.plateDB.PluggingStatus.label == 'Automatic').one().pk
                if totoro_plate.getPlateCompletion() < completion_factor:
                    for plugging in plate.pluggings:
                        if plugging.status.label in ['Good', 'Overridden Good']:
                            plugging.plugging_status_pk = automatic_pk

        return

    mangaTileIDs, neverobserve = getMangaTileIDs()

    specialPlates = readSpecialPlates()
    specialPlates['comment'].fill_value = ''
    specialPlates = specialPlates.filled()

    with session.begin():
        allPlates = session.query(db.plateDB.Plate).join(
            db.plateDB.PlateToSurvey, db.plateDB.Survey, db.plateDB.SurveyMode).filter(
                db.plateDB.Survey.label == 'MaNGA',
                db.plateDB.SurveyMode.label.like('%MaNGA%')).all()

    with session.begin():

        for nn, plate in enumerate(allPlates):

            try:
                newPlate = session.query(db.mangaDB.Plate).filter(
                    db.mangaDB.Plate.platedb_plate_pk == plate.pk).one()
            except Exception:
                newPlate = db.mangaDB.Plate()

            if plate.plate_id in mangaTileIDs:
                newPlate.manga_tileid = float(mangaTileIDs[plate.plate_id])
            else:
                log.warning('cannot find a valid manga_tileid for plate {}'
                            .format(plate.plate_id), TotoroUserWarning)
                newPlate.manga_tileid = None

            if plate.plate_id in specialPlates['plateid']:
                row = specialPlates[specialPlates['plateid'] == plate.plate_id]
                newPlate.special_plate = True
                newPlate.all_sky_plate = bool(row['all_sky_plate'][0])
                newPlate.commissioning_plate = bool(row['commissioning_plate'][0])
                newPlate.comment = row['comment'][0]
            else:
                newPlate.special_plate = False
                newPlate.all_sky_plate = False
                newPlate.commissioning_plate = False
                newPlate.comment = ''

            if plate.plate_id in neverobserve:
                newPlate.neverobserve = bool(neverobserve[plate.plate_id])
            # Some hardcoded values that may not appear in neverobserve
            elif plate.plate_id in [7566, 7567, 7568]:
                newPlate.neverobserve = True
            else:
                newPlate.neverobserve = False

            newPlate.platedb_plate_pk = float(plate.pk)

            session.add(newPlate)

    log.important('DONE')

    return


if __name__ == '__main__':

    totoro()
